(defclass material ()
  ((ambient-brdf :initarg :ambient-brdf :accessor ambient-brdf)
   (diffuse-brdf :initarg :diffuse-brdf :accessor diffuse-brdf)))

(defgeneric shade (material shdr))

(defclass matte (material) ())

(defmethod shade ((m matte) shdr)
  (let* ((wo (sb-cga:vec* (direction (ray shdr)) -1.0))
         (l (rgb* (rho (ambient-brdf m) shdr wo) (L *ambient-light* shdr))))
    (dolist (light *lights*)
      (let* ((wi (get-direction light shdr))
             (ndotwi (sb-cga:dot-product (normal shdr) wi)))
        (if (> ndotwi 0.0)
            (let ((in-shadow nil))
              (when (shadows light)
                (setf in-shadow (trace-shadow-ray (make-ray :origin (hit-point shdr)
                                                            :direction wi))))
              (when (not in-shadow)
                (setf l (rgb+ (rgb-scale (rgb* (L light shdr)
                                               (f (diffuse-brdf m) shdr wo wi))
                                         ndotwi)
                              l)))))))
    l))

(defclass phong (material)
  ((specular-brdf :initarg :specular-brdf :accessor specular-brdf)))

(defmethod shade ((p phong) shdr)
  (let* ((wo (sb-cga:vec* (direction (ray shdr)) -1.0))
         (l (rgb* (rho (ambient-brdf p) shdr wo) (L *ambient-light* shdr))))
    (dolist (light *lights*)
      (let* ((wi (get-direction light shdr))
             (ndotwi (sb-cga:dot-product (normal shdr) wi)))
        (if (> ndotwi 0.0)
            (let ((in-shadow nil))
              (when (shadows light)
                (setf in-shadow (trace-shadow-ray (make-ray :origin (hit-point shdr)
                                                            :direction wi))))
              (when (not in-shadow)
                (setf l (rgb+ (rgb-scale (rgb* (L light shdr)
                                               (rgb+ (f (diffuse-brdf p) shdr wo wi)
                                                     (f (specular-brdf p) shdr wo wi)))
                                         ndotwi)
                              l)))))))
    l))

(defclass reflective (phong)
  ((pspecular-brdf :initarg :pspecular-brdf :accessor pspecular-brdf)))

(defmethod shade ((r reflective) shdr)
  ;; (let ((p (make-instance 'phong :ambient-brdf (ambient-brdf r)
  ;;                         :diffuse-brdf (diffuse-brdf r)
  ;;                         :specular-brdf (specular-brdf r))))
  ;;(let ((l (shade p shdr)))
      (let ((wo (sb-cga:vec* (direction (ray shdr)) -1.0))
            (l (rgb 0.0 0.0 0.0)))
        (multiple-value-bind (fr wi) (sample-f (pspecular-brdf r) shdr wo)
          (let ((reflected-ray (make-ray :origin (hit-point shdr) :direction wi)))
            (setf l (rgb+ (rgb* (rgb-scale (whitted-trace-ray reflected-ray (+ (depth shdr) 1))
                                           (sb-cga:dot-product (normal shdr) wi))
                                fr)
                          l))
            l))))
             


